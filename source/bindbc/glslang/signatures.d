/*
Copyright (c) 2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.glslang.signatures;

import bindbc.glslang.types;

extern(C) @nogc nothrow:

alias f_glslang_get_version = void function(glslang_version_t* ver);

alias f_glslang_initialize_process = int function();
alias f_glslang_finalize_process = void function();

alias f_glslang_shader_create = glslang_shader_t* function(const(glslang_input_t)* input);
alias f_glslang_shader_delete = void function(glslang_shader_t* shader);
alias f_glslang_shader_set_preamble = void function(glslang_shader_t* shader, const(char)* s);
alias f_glslang_shader_shift_binding = void function(glslang_shader_t* shader, glslang_resource_type_t res, uint base);
alias f_glslang_shader_shift_binding_for_set = void function(glslang_shader_t* shader, glslang_resource_type_t res, uint base, uint set);
alias f_glslang_shader_set_options = void function(glslang_shader_t* shader, int options);
alias f_glslang_shader_set_glsl_version = void function(glslang_shader_t* shader, int ver);
alias f_glslang_shader_set_default_uniform_block_set_and_binding = void function(glslang_shader_t* shader, uint set, uint binding);
alias f_glslang_shader_set_default_uniform_block_name = void function(glslang_shader_t* shader, const(char)* name);
alias f_glslang_shader_set_resource_set_binding = void function(glslang_shader_t* shader, const(const(char)*)* bindings, uint num_bindings);
alias f_glslang_shader_preprocess = int function(glslang_shader_t* shader, const(glslang_input_t)* input);
alias f_glslang_shader_parse = int function(glslang_shader_t* shader, const(glslang_input_t)* input);
alias f_glslang_shader_get_preprocessed_code = const(char)* function(glslang_shader_t* shader);
alias f_glslang_shader_set_preprocessed_code = void function(glslang_shader_t* shader, const(char)* code);
alias f_glslang_shader_get_info_log = const(char)* function(glslang_shader_t* shader);
alias f_glslang_shader_get_info_debug_log = const(char)* function(glslang_shader_t* shader);

alias f_glslang_program_create = glslang_program_t* function();
alias f_glslang_program_delete = void function(glslang_program_t* program);
alias f_glslang_program_add_shader = void function(glslang_program_t* program, glslang_shader_t* shader);
alias f_glslang_program_link = int function(glslang_program_t* program, int messages);
alias f_glslang_program_add_source_text = void function(glslang_program_t* program, glslang_stage_t stage, const(char)* text, size_t len);
alias f_glslang_program_set_source_file = void function(glslang_program_t* program, glslang_stage_t stage, const(char)* file);
alias f_glslang_program_map_io = int function(glslang_program_t* program);
alias f_glslang_program_map_io_with_resolver_and_mapper = int function(glslang_program_t* program, glslang_resolver_t* resolver, glslang_mapper_t* mapper);
alias f_glslang_program_SPIRV_generate = void function(glslang_program_t* program, glslang_stage_t stage);
alias f_glslang_program_SPIRV_generate_with_options = void function(glslang_program_t* program, glslang_stage_t stage, glslang_spv_options_t* spv_options);
alias f_glslang_program_SPIRV_get_size = size_t function(glslang_program_t* program);
alias f_glslang_program_SPIRV_get = void function(glslang_program_t* program, uint*);
alias f_glslang_program_SPIRV_get_ptr = uint* function(glslang_program_t* program);
alias f_glslang_program_SPIRV_get_messages = const(char)* function(glslang_program_t* program);
alias f_glslang_program_get_info_log = const(char)* function(glslang_program_t* program);
alias f_glslang_program_get_info_debug_log = const(char)* function(glslang_program_t* program);

alias f_glslang_glsl_mapper_create = glslang_mapper_t* function();
alias f_glslang_glsl_mapper_delete = void function(glslang_mapper_t* mapper);

alias f_glslang_glsl_resolver_create = glslang_resolver_t* function(glslang_program_t* program, glslang_stage_t stage);
alias f_glslang_glsl_resolver_delete = void function(glslang_resolver_t* resolver);
